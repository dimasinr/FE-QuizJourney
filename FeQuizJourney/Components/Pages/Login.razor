@page "/login"
@using FeQuizJourney.Components.Models;
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject AuthService AuthService
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card p-4" style="width: 25rem;">
        <h3 class="text-center mb-4">Quiz Journey Login</h3>

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3" role="alert">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private LoginRequest loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        var token = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

        if (!string.IsNullOrWhiteSpace(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var roleClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role || c.Type == "role");
            var role = roleClaim?.Value;

            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", token);
            await JS.InvokeVoidAsync("localStorage.setItem", "username", loginModel.Username);
            await JS.InvokeVoidAsync("localStorage.setItem", "role", role);

            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Login gagal. Username atau password salah.";
        }
    }
}
