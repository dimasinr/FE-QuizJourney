@page "/room/{Id:int}/{QuizId:int}/result"
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject QuestionServices QuestionService
@using FeQuizJourney.Components.Models


<style>
    .score-box {
    background-color: #6a0dad;
    color: white;
    font-size: 4rem;
    padding: 1rem 2rem;
    border-radius: 2rem;
    box-shadow: 0 8px 20px rgba(106, 13, 173, 0.4);
    }

    .result-card {
    background-color: #f8f9fa;
    border-left: 5px solid #6a0dad;
    padding: 1rem;
    border-radius: 1rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .return-home-btn {
    background-color: #6a0dad;
    color: white;
    border-radius: 2rem;
    font-weight: bold;
    transition: all 0.3s ease;
    }

    .return-home-btn:hover {
    background-color: #5e0f89;
    transform: scale(1.05);
    }
</style>


<div class="container py-5 text-white" style="background: linear-gradient(to bottom, #4b0082, #2c006f); min-height: 100vh;">
    <div class="bg-white text-dark p-5 rounded-4 shadow-lg">
        <h1 class="text-center fw-bold mb-4" style="color: #5e0f89;">Hasil Kuis</h1>

        <div class="text-center mb-5">
            <h2 class="display-4 fw-bold">Skor Anda</h2>
            <div class="score-box mx-auto mt-3">
                @score
            </div>
        </div>

        <div class="question-summary">
            @foreach (var item in questions)
            {
                <div class="result-card mb-4">
                    <h5 class="fw-bold">@item.Text</h5>
                    <div>
                        Jawaban Anda:
                        <span class="@(item.SelectedChoice != null && item.SelectedChoice.IsCorrect ? "text-success" : "text-danger")">
                            @(item.SelectedChoice?.Text ?? "Tidak ada jawaban")
                        </span>
                    </div>
                    @if (item.SelectedChoice == null || !item.SelectedChoice.IsCorrect)
                    {
                        <div>
                            Jawaban Benar:
                            <strong>
                                @item.Choices.FirstOrDefault(x => x.Id == item.CorrectChoiceId)?.Text
                            </strong>
                        </div>
                    }
                </div>
            }
        </div>
        <BarChart Height="500" Style="width: 100%" @ref="barChart" />

        <div class="text-center mt-4">
            <button class="btn btn-lg return-home-btn px-4 py-2" @onclick="ToHome">
                Kembali ke Beranda
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public int QuizId { get; set; }

    private string username = string.Empty;
    private int score = 0;
    private List<QuestionResponse> questions = new();
    private List<UserScoreResponse>? userScores;

    private BarChart barChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected override void OnInitialized()
    {
        if (barChart is null || userScores == null || userScores.Count == 0) return;

        var labels = userScores.Select(s => s.Username.ToUpper()).ToList();
        var data = userScores.Select(s => (double?)s.Score).ToList();
        var colors = userScores.Select((s, index) =>
            ColorUtility.CategoricalTwelveColors[index % ColorUtility.CategoricalTwelveColors.Length]).ToList();

        var datasets = new List<IChartDataset>
    {
        new BarChartDataset
        {
            Label = "Skor",
            Data = data,
            BackgroundColor = colors,
            BorderWidth = Enumerable.Repeat(0.0, userScores.Count).ToList()
        }
    };

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = datasets
            };
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && barChart is not null)
        {
            await LoadDataAsync();
            OnInitialized();
            await barChart.InitializeAsync(chartData, barChartOptions);
        }
    }


    private async Task UpdateChartAsync()
    {
        if (barChart is null || userScores.Count == 0) return;

        var labels = userScores.Select(s => s.Username.ToUpper()).ToList();
        var data = userScores.Select(s => (double?)s.Score).ToList();
        var colors = userScores.Select((s, index) =>
            ColorUtility.CategoricalTwelveColors[index % ColorUtility.CategoricalTwelveColors.Length]).ToList();

        chartData = new ChartData
            {
                Labels = labels,
                Datasets = new List<IChartDataset>
        {
            new BarChartDataset
            {
                Label = "Skor",
                Data = data,
                BackgroundColor = colors,
                BorderWidth = Enumerable.Repeat(0.0, userScores.Count).ToList()
            }
        }
            };

        barChartOptions = new BarChartOptions
            {
                Responsive = true,
                IndexAxis = "y"
            };

        await barChart.UpdateAsync(chartData, barChartOptions);
    }

    private async Task ToHome()
    {
        Navigation.NavigateTo("/");
    }

    private async Task LoadDataAsync()
    {
        try
        {
            username = await JSRuntime.InvokeAsync<string>("localStorageHelper.getUsername");

            var result = await QuestionService.GetQuestionByIdAsync(Id);
            questions = result ?? new List<QuestionResponse>();
            userScores = await QuestionService.GetUserScoresByRoomIdAsync(Id);

            score = questions
                .Where(q => q.SelectedChoice != null && q.SelectedChoice.IsCorrect)
                .Sum(q => q.Score);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[LoadDataAsync ERROR] {ex}");
        }
    }
}
