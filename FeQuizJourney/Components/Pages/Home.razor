@page "/"
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h1 class="display-4 text-center text-white mb-4">Quiz Journey</h1>

@if (!string.IsNullOrEmpty(username))
{
    <h5 class="text-white text-end me-4">Hello, @username!</h5>
}

<div class="container mt-5">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4">
        @foreach (var room in rooms)
        {
            <div class="col">
                <div class="card h-100 border-0 shadow-lg bg-dark text-white rounded-4">
                    <div class="card-body">
                        <h5 class="card-title text-warning">@room.Title</h5>
                        <p class="card-text text-white">@room.Description</p>
                        <p class="card-text text-muted"><small>👨‍🏫 Guru: @room.Teacher.Name</small></p>
                        <button class="btn btn-primary" @onclick="() => JoinRoom(room.RoomId)">Join Room</button>
                        <button class="btn btn-primary" @onclick="JoinRooms">Joins Room</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<Room> rooms = new();
    private HubConnection? hubConnection;
    private string? username;
    private bool hasInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            username = await JS.InvokeAsync<string>("localStorage.getItem", "username");

            if (string.IsNullOrEmpty(username))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Load dummy room data
            var json = @"{
                ""$id"": ""1"",
                ""$values"": [
                    {
                        ""$id"": ""2"",
                        ""roomId"": 1,
                        ""title"": ""Math Quiz Room"",
                        ""description"": ""This is a room for the Math quiz for students."",
                        ""teacher"": {
                            ""$id"": ""3"",
                            ""id"": 1,
                            ""name"": ""dimas""
                        }
                    }
                ]
            }";

            var doc = JsonDocument.Parse(json);
            var values = doc.RootElement.GetProperty("$values");

            foreach (var roomEl in values.EnumerateArray())
            {
                var room = new Room
                    {
                        RoomId = roomEl.GetProperty("roomId").GetInt32(),
                        Title = roomEl.GetProperty("title").GetString(),
                        Description = roomEl.GetProperty("description").GetString(),
                        Teacher = new Teacher
                        {
                            Id = roomEl.GetProperty("teacher").GetProperty("id").GetInt32(),
                            Name = roomEl.GetProperty("teacher").GetProperty("name").GetString()
                        }
                    };

                rooms.Add(room);
            }

            StateHasChanged();
        }
    }

    private void JoinRooms()
    {
        Console.WriteLine("JoinRooms button clicked.");
    }

    private async Task JoinRoom(int roomId)
    {
        Console.WriteLine("JoinRoom method called");

        if (hubConnection == null)
        {
            Console.WriteLine("HubConnection is null, creating new connection...");
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5121/roomHub")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("UserJoined", (user) =>
            {
                Console.WriteLine($"UserJoined: {user}");
            });

            hubConnection.Closed += async (exception) =>
            {
                Console.WriteLine("Connection closed: " + exception?.Message);
            };

            try
            {
                Console.WriteLine("Starting SignalR connection...");
                await hubConnection.StartAsync();
                Console.WriteLine("SignalR connection started");

                await hubConnection.InvokeAsync("JoinRoom", roomId, username);
                Console.WriteLine($"Joined Room ID: {roomId}");

                Navigation.NavigateTo($"/room/{roomId}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("HubConnection already exists.");
        }
    }

    public class Room
    {
        public int RoomId { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public Teacher Teacher { get; set; } = new();
    }

    public class Teacher
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}
