@page "/"
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject RoomServices RoomService

@using FeQuizJourney.Components.Models;

<h1 class="display-4 text-center text-white mb-4">Quiz Journey</h1>

@if (!string.IsNullOrEmpty(username))
{
    <h5 class="text-white text-start me-4">Hello, @username!</h5>
}

<div class="d-flex justify-content-between">
    <button @onclick=CreateRoom class="btn btn-primary">Create Room</button>
    <button @onclick=LogoutAsync class="btn btn-secondary">Logout</button>
</div>

<div class="container mt-5">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 g-4">
        @foreach (var room in rooms)
        {
            <div class="col">
                <div class="card h-100 border-0 shadow-lg text-dark rounded-4">
                    <div class="card-body">
                        <h5 class="card-title text-warning">@room.Title</h5>
                        <p class="card-text text-dark">@room.Description</p>
                        <p class="card-text text-muted"><small>👨‍🏫 Guru: Mr. @room.Teacher.Username</small></p>
                        <button class="btn btn-primary" @onclick="() => JoinRoom(room.RoomId)">Join Room</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private HubConnection? hubConnection;
    private string? username;
    private bool hasInitialized = false;

    private ApiResponsePagination? roomData;
    private List<Room> rooms => roomData?.Data ?? new List<Room>();

    private async Task GetRoomsAsync()
    {
        roomData = await RoomService.GetRoomsAsync();
        StateHasChanged();
        Console.WriteLine(roomData);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)

    {
        if (firstRender && !hasInitialized)
        {
            hasInitialized = true;

            username = await JS.InvokeAsync<string>("localStorage.getItem", "username");

            await GetRoomsAsync();

            if (string.IsNullOrEmpty(username))
            {
                Navigation.NavigateTo("/login");
                return;
            }
        }
    }

    private async Task JoinRoom(int roomId)
    {
        Console.WriteLine("JoinRoom method called");

        if (hubConnection == null)
        {
            Console.WriteLine("HubConnection is null, creating new connection...");
            hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5121/roomHub")
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string>("UserJoined", (user) =>
            {
                Console.WriteLine($"UserJoined: {user}");
            });

            hubConnection.Closed += async (exception) =>
            {
                Console.WriteLine("Connection closed: " + exception?.Message);
            };

            try
            {
                Console.WriteLine("Starting SignalR connection...");
                await hubConnection.StartAsync();
                Console.WriteLine("SignalR connection started");

                await hubConnection.InvokeAsync("JoinRoom", roomId, username);
                Console.WriteLine($"Joined Room ID: {roomId}");

                Navigation.NavigateTo($"/room/{roomId}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("HubConnection already exists.");
        }
    }

    private async Task LogoutAsync()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "username");

        if (hubConnection is not null)
        {
            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();
            hubConnection = null;
        }

        Navigation.NavigateTo("/login", forceLoad: true);
    }

    private void CreateRoom()
    {
        Navigation.NavigateTo("/teacher/create/room/");
    }
   
}
